# VS Styling Guide

This document provides comprehensive guidance for implementing VS's unique styling system in both light and dark modes.

## The VS Brand Vision

Our design system creates a **vibrant premium experience** that balances creative energy with professional polish. The VS aesthetic is distinguished by:

- **Strategic vibrancy** - Bold colors used thoughtfully, not overwhelming
- **Depth through subtle details** - Gradients, shadows, and floating elements
- **Playful motion** - More pronounced animations than typical corporate sites
- **Professional foundation** - Clean layouts with clear hierarchy

## ⚠️ CRITICAL: IMPLEMENTING BOTH LIGHT AND DARK MODE ⚠️

### FUNDAMENTAL CLARIFICATION
**Many assume only dark mode needs implementation. THIS IS WRONG. BOTH modes need explicit styling.**

### The Core Rules for Text Color in Both Modes

**❌ NEVER USE THIS PATTERN - IT WILL BREAK:**
```jsx
<p className="text-[var(--text-navy)]">This will NOT work in dark mode</p>
```

**✅ ALWAYS USE THIS PATTERN INSTEAD:**
```jsx
<p style={{ color: 'var(--text-navy)' }} className="dark:text-white">This works correctly</p>
```

For backgrounds, this pattern works perfectly:
```jsx
<div className="bg-[var(--bg-cream)] dark:bg-[var(--bg-navy)]">Content here</div>
```

## Complete Vision for Light Mode

Light mode is NOT just "default styling" - it requires specific implementation:

### Light Mode Core Elements

1. **NO PLAIN WHITE** - Always use subtle gradients instead of flat white
   ```jsx
   {/* CORRECT - Subtle gradient background */}
   <div className="bg-gradient-to-br from-white to-[rgba(255,246,239,0.8)]">Content</div>
   
   {/* WRONG - Plain white */}
   <div className="bg-white">Content</div>
   ```

2. **Subtle, Directional Shadows** - A few pixels down and to the left, very low opacity
   ```jsx
   <div className="shadow-[2px_2px_8px_rgba(0,0,0,0.05)]">
     Content with proper light mode shadow
   </div>
   ```

3. **Low-Opacity Floating Elements** - To create visual interest and depth
   ```jsx
   <div className="absolute top-20 left-5 w-16 h-16 rounded-[40%] rotate-12 opacity-5 
                 bg-[var(--primary-orange)] animate-float-slow dark:hidden"></div>
   ```

4. **Texture Patterns** - Subtle background textures at very low opacity
   ```jsx
   <div className="bg-[radial-gradient(var(--grid-dot)_1px,transparent_1px)] bg-size-[20px_20px]">
     Content with dot pattern background
   </div>
   ```

5. **Warm Color Palette** - Cream backgrounds with orange and teal accents
   ```jsx
   <div className="bg-[var(--bg-cream)] border-[var(--primary-orange-light)]">
     Content with proper light mode colors
   </div>
   ```

## Complete Vision for Dark Mode

Dark mode requires rich, vibrant implementation with depth and interest:

### Dark Mode Core Elements

1. **Rich Gradients** - Deep, layered backgrounds with subtle color shifts
   ```jsx
   <div className="dark:bg-gradient-to-br dark:from-[var(--bg-navy)] dark:to-[rgba(9,35,47,0.9)]">
     Content with rich dark mode gradient
   </div>
   ```

2. **Elevated Glow Effects** - Soft, colorful glows that create depth
   ```jsx
   <div className="dark:shadow-[0_0_15px_rgba(53,115,128,0.15)]">
     Content with proper dark mode glow
   </div>
   ```

3. **Vibrant Floating Elements** - Same elements but with higher opacity and glow
   ```jsx
   <div className="absolute top-20 left-5 w-16 h-16 rounded-[40%] rotate-12 opacity-10 
                 bg-gradient-to-r from-[var(--primary-orange)] to-[var(--primary-orange-hover)] 
                 animate-float-slow hidden dark:block"></div>
   ```

4. **Enhanced Texture Patterns** - More visible in dark mode
   ```jsx
   <div className="dark:bg-[radial-gradient(rgba(255,255,255,0.03)_1px,transparent_1px)] dark:bg-size-[20px_20px]">
     Content with enhanced dark mode pattern
   </div>
   ```

5. **Vibrant Accent Colors** - Slightly brighter and more pronounced accents
   ```jsx
   <button className="dark:bg-gradient-to-r dark:from-[var(--primary-orange)] dark:to-[var(--primary-orange-hover)]
                     dark:shadow-[0_0_15px_rgba(254,163,93,0.2)]">
     Button with proper dark mode styling
   </button>
   ```

## Floating Elements Implementation

Floating elements add subtle visual interest and depth without distracting. They should be:
- Almost imperceptible in light mode (opacity 0.05-0.1)
- Slightly more visible in dark mode (opacity 0.1-0.15)
- Different between light and dark modes
- Simple geometric shapes with high border-radius
- Set to subtle, slow animations

```jsx
function ComponentWithFloatingElements() {
  return (
    <div className="relative overflow-hidden">
      {/* Light mode floating elements */}
      <div className="absolute top-10 right-5 w-20 h-20 rounded-[40%] rotate-12 opacity-5 
                    bg-[var(--primary-orange)] animate-float-slow dark:hidden"></div>
      <div className="absolute bottom-20 left-10 w-32 h-32 rounded-[30%] -rotate-6 opacity-8
                    bg-[var(--secondary-teal-light)] animate-float-medium dark:hidden"></div>
      
      {/* Dark mode floating elements */}
      <div className="absolute top-10 right-5 w-20 h-20 rounded-[40%] rotate-12 opacity-10 
                    bg-gradient-to-r from-[var(--primary-orange)] to-[var(--primary-orange-hover)] 
                    animate-float-slow hidden dark:block"></div>
      <div className="absolute bottom-20 left-10 w-32 h-32 rounded-[30%] -rotate-6 opacity-15
                    bg-gradient-to-r from-[var(--secondary-teal)] to-[var(--secondary-teal-light)] 
                    animate-float-medium hidden dark:block"></div>
      
      {/* Actual content */}
      <div className="relative z-10">
        Content goes here
      </div>
    </div>
  );
}
```

Add these animations to your tailwind.config.js:
```js
extend: {
  animation: {
    'float-slow': 'float 8s ease-in-out infinite',
    'float-medium': 'float 6s ease-in-out infinite',
    'float-fast': 'float 4s ease-in-out infinite',
  },
  keyframes: {
    float: {
      '0%, 100%': { transform: 'translateY(0) rotate(var(--tw-rotate, 0))' },
      '50%': { transform: 'translateY(-10px) rotate(var(--tw-rotate, 0))' },
    },
  },
}
```

## "VS Bubbly" Animation Style

Our animations are approximately 20% more pronounced than typical corporate sites - creating a playful, creative feel without sacrificing professionalism.

### Enhanced Hover Effects

```css
/* Standard corporate hover */
.standard-hover:hover {
  transform: translateY(-2px);
  box-shadow: var(--shadow-md);
}

/* VS "bubbly" hover - 20% more pronounced */
.vs-hover:hover {
  transform: translateY(-4px) scale(1.02);
  box-shadow: var(--shadow-lg);
}
```

### Professional GSAP Implementation

All complex animations MUST use `useGSAP` and `gsap.context` for proper lifecycle management:

```jsx
import { useGSAP } from "@gsap/react";
import gsap from "gsap";

function AnimatedComponent() {
  const containerRef = useRef(null);
  
  useGSAP(() => {
    // Create context for proper cleanup
    const ctx = gsap.context(() => {
      // Animations here
      gsap.to(".element", {
        y: -10,
        opacity: 1,
        duration: 0.5,
        stagger: 0.1
      });
    }, containerRef); // Scope to container
    
    return () => ctx.revert(); // Proper cleanup
  }, []);
  
  return (
    <div ref={containerRef}>
      <div className="element">Animated element</div>
    </div>
  );
}
```

## Component Examples with Complete Implementation

### Card with Both Light and Dark Styling

```jsx
<div className="relative overflow-hidden">
  {/* Floating elements - light and dark mode versions */}
  <div className="absolute -z-10 top-20 right-0 w-16 h-16 rounded-[40%] rotate-12 opacity-5 
               bg-[var(--primary-orange)] animate-float-slow dark:hidden"></div>
  <div className="absolute -z-10 top-20 right-0 w-16 h-16 rounded-[40%] rotate-12 opacity-10 
               bg-gradient-to-r from-[var(--primary-orange)] to-[var(--primary-orange-hover)]
               animate-float-slow hidden dark:block"></div>
  
  {/* Card with proper styling for BOTH modes */}
  <div className="relative z-10 bg-gradient-to-br from-white to-[rgba(255,246,239,0.8)]
               dark:bg-gradient-to-br dark:from-[var(--card-bg-navy)] dark:to-[rgba(12,67,99,0.8)]
               rounded-[var(--border-radius-lg)] p-6 
               shadow-[2px_2px_8px_rgba(0,0,0,0.05)] 
               dark:shadow-[0_0_15px_rgba(53,115,128,0.15)]
               transition-all duration-[350ms] ease-[cubic-bezier(0.34,1.56,0.64,1)]
               hover:shadow-[2px_2px_12px_rgba(0,0,0,0.08)] dark:hover:shadow-[0_0_20px_rgba(53,115,128,0.2)]
               hover:translate-y-[-4px] hover:scale-[1.02]">
    <div className="w-12 h-12 rounded-full bg-gradient-to-r from-[var(--primary-orange)] to-[var(--primary-orange-hover)]
                  flex items-center justify-center mb-4">
      <Icon className="text-white" />
    </div>
    
    <h3 style={{ color: 'var(--text-navy)' }} className="dark:text-white text-xl font-medium mb-2">
      Feature Title
    </h3>
    
    <p style={{ color: 'var(--text-navy)' }} className="dark:text-white/70">
      Feature description with proper implementation for both light and dark mode.
    </p>
  </div>
</div>
```

### Button with Complete Implementation

```jsx
<button 
  className="bg-gradient-to-r from-[var(--primary-orange)] to-[var(--primary-orange-hover)]
           dark:bg-gradient-to-r dark:from-[var(--primary-orange)] dark:to-[var(--primary-orange-hover)]
           text-white px-6 py-3 rounded-[var(--border-radius-full)] 
           shadow-[1px_1px_4px_rgba(0,0,0,0.1)]
           dark:shadow-[0_0_8px_rgba(254,163,93,0.2)]
           transition-all duration-[350ms] ease-[cubic-bezier(0.34,1.56,0.64,1)]
           hover:translate-y-[-3px] hover:scale-[1.03] 
           hover:shadow-[1px_1px_8px_rgba(0,0,0,0.15)]
           dark:hover:shadow-[0_0_15px_rgba(254,163,93,0.3)]">
  Primary Action
</button>
```

### CourseStats Component

This component maintains its unique vibrant color scheme with proper implementation for both modes:

```jsx
<div className="stat-item">
  <div className="relative bg-gradient-to-br from-white to-[rgba(255,250,245,0.9)]
                dark:bg-[#09232F] rounded-[var(--border-radius-lg)] p-6 
                border border-[rgba(0,0,0,0.03)] dark:border-white/5 
                shadow-[2px_2px_8px_rgba(0,0,0,0.05)]
                dark:shadow-[0_0_15px_rgba(0,0,0,0.3)]
                transition-all duration-[350ms] ease-[cubic-bezier(0.34,1.56,0.64,1)]
                hover:translate-y-[-6px] hover:scale-[1.03] hover:rotate-[0.5deg]
                hover:shadow-[2px_2px_12px_rgba(0,0,0,0.08)]
                dark:hover:shadow-[0_0_25px_rgba(0,0,0,0.4)]
                group">
    {/* Light mode gradient with vibrant accent */}
    <div className="absolute inset-0 rounded-[var(--border-radius-lg)] 
                  opacity-100 dark:opacity-0 transition-all duration-500" 
         style={{ background: `linear-gradient(to bottom, white 30%, ${statColor}15 100%)` }}>
    </div>
    
    {/* Dark mode gradient with enhanced glow */}
    <div className="absolute inset-0 rounded-[var(--border-radius-lg)] 
                  opacity-0 dark:opacity-100 transition-all duration-500" 
         style={{ background: `linear-gradient(135deg, #09232F 0%, ${statColor}30 100%)` }}>
    </div>
    
    {/* Hover glow effect for dark mode */}
    <div className="absolute inset-0 rounded-[var(--border-radius-lg)]
                   opacity-0 dark:group-hover:opacity-100 transition-all duration-500 pointer-events-none"
         style={{ boxShadow: `0 0 25px ${statColor}40` }}>
    </div>
    
    {/* Content */}
    <div className="relative z-10 flex flex-col items-center">
      {/* Icon with playful springy animation */}
      <div className="w-16 h-16 rounded-full flex items-center justify-center mb-4 
                     transform transition-all duration-[400ms] ease-[cubic-bezier(0.34,1.56,0.64,1)]
                     group-hover:scale-[1.15] group-hover:translate-y-[-2px]"
           style={{ 
             background: `linear-gradient(135deg, ${statColor} 0%, ${statColorHover} 100%)`,
             boxShadow: `0 6px 15px ${statColor}40`
           }}>
        <Icon className="w-8 h-8 text-white" />
      </div>
      
      {/* Value with enhanced scale and glow effect */}
      <div className="text-3xl font-bold mb-2 
                     transition-all duration-[400ms] ease-[cubic-bezier(0.34,1.56,0.64,1)]
                     group-hover:scale-[1.15]" 
           style={{ 
             color: statColor, 
             textShadow: `0 2px 8px ${statColor}30`,
           }}>
        {value}
        {/* Subtle animated glow effect on hover */}
        <div className="absolute inset-0 opacity-0 group-hover:opacity-100 
                       transition-opacity duration-300 blur-[8px] -z-10"
             style={{ background: `${statColor}20`, borderRadius: '8px' }}></div>
      </div>
      
      {/* Label with subtle animation */}
      <div style={{ color: 'var(--text-navy)' }} 
           className="dark:text-white text-sm font-medium 
                     transition-all duration-300 group-hover:translate-y-[2px]">
        {label}
      </div>
    </div>
  </div>
</div>
```

## Achieving the Perfect Balance

The VS brand uniquely balances creative energy with professional polish through the 80/20 rule:

- **80% Professional Structure**
  - Clean grid layouts and consistent spacing
  - Professional typography with clear hierarchy
  - Consistent component patterns
  - Thoughtful color usage with proper contrast
  
- **20% Creative Energy**
  - Enhanced "bubbly" animations (more pronounced than corporate sites)
  - Vibrant accent colors used strategically
  - Playful interaction details (subtle rotations, floating elements)
  - Subtle floating elements and texture patterns

### Creating the VS Balance

1. **Start with Structure**
   - Begin with a solid, professional foundation
   - Establish clear information hierarchy
   - Use the grid system for alignment
   - Ensure all content is readable and accessible

2. **Add Creative Energy Selectively**
   - Enhance key interactions with "VS Bubbly" animations
   - Apply vibrant colors to focal points
   - Add subtle creative details that reward attention
   - Use subtle rotations, gradients, and shadows for depth

3. **Apply the "One Step Beyond" Rule**
   - Take typical corporate styling and go one step beyond (not three)
   - Animations: 20% more pronounced than standard corporate sites
   - Colors: 20% more vibrant in key areas
   - Interactions: 20% more playful and responsive

4. **Maintain Professional Guardrails**
   - Never sacrifice readability for style
   - Ensure all animations have purpose
   - Keep color usage focused and intentional
   - Maintain consistent spacing and alignment

## Critical Technical Guidelines

### Text Color Implementation

**❌ WRONG - Will break in dark mode:**
```jsx
<p className="text-[var(--text-navy)]">This will NOT work in dark mode</p>
```

**✅ CORRECT - Works in both modes:**
```jsx
<p style={{ color: 'var(--text-navy)' }} className="dark:text-white">This works correctly</p>
```

### Background Color Implementation

**❌ WRONG - Won't switch in dark mode:**
```jsx
<div style={{ backgroundColor: 'var(--bg-cream)' }}>This won't switch in dark mode</div>
```

**✅ CORRECT - This pattern works for backgrounds:**
```jsx
<div className="bg-[var(--bg-cream)] dark:bg-[var(--bg-navy)]">Content here</div>
```

### Plain White Elimination

**❌ WRONG - Plain white is not allowed:**
```jsx
<div className="bg-white p-6">Plain white content</div>
```

**✅ CORRECT - Always use subtle gradients:**
```jsx
<div className="bg-gradient-to-br from-white to-[rgba(255,246,239,0.8)] p-6">
  Subtle gradient content
</div>
```

### Animation Implementation

**❌ WRONG - No cleanup, potential memory leaks:**
```jsx
useEffect(() => {
  gsap.to(".element", { y: -10 });
  // No cleanup
}, []);
```

**✅ CORRECT - Proper GSAP usage with cleanup:**
```jsx
useGSAP(() => {
  const ctx = gsap.context(() => {
    gsap.to(".element", { y: -10 });
  }, containerRef);
  
  return () => ctx.revert();
}, []);
```

## Always Test Both Modes

After making styling changes:
1. Test in light mode first (verify gradients, shadows, and floating elements)
2. Test in dark mode (verify glows, enhanced gradients, and floating elements)
3. Verify all text is visible in BOTH modes
4. Check hover animations in both modes

## Debugging Common Issues

If styling looks wrong in either mode, check for:

1. Using `text-[var(--variable)]` for text colors (the #1 cause of dark mode issues)
2. Using plain white backgrounds instead of subtle gradients
3. Missing or inappropriate shadows for each mode (directional for light, glow for dark)
4. Missing floating elements or texture patterns
5. Animation issues (not using useGSAP and gsap.context)
6. Missing gradient backgrounds (using flat colors instead of gradients)

Remember: Every component needs specific styling for BOTH light and dark modes. Light mode is not just "default" styling!